public class EightQueens {
	// brute force approach to place 8 queens that cannot attach each other
	// in a 8x8 chess board
	public static void main(String[] args) {
		// setting variables needed
		int queenNum = 8;
		int[] chessBoard = new int[queenNum];
		
		// calling method to place 8 queens on chessboard
		placeQueens(chessBoard, queenNum);
		
		// displaying the finished chess board
		displayChessboard(chessBoard);
	}
	
	// method to place the 8 queens in the board
	private static void placeQueens(int[] chessBoard, int queenNum) {
		for(int i = 0; i < chessBoard.length; i++) {
			chessBoard[i] = -1;
			// if a queen cannot be placed because another queen can attack it, we start placing
			// queens again until we find the positions that work
			if(!placeQueenInRow(chessBoard, queenNum, i)) {
				i = -1;
			}		
		}
	}
	
	// method that places a queen in a row of the board only if it fits harmoniously with the other pieces
	// because it randomly places the queen, it checks up to 20 times if it cannot place it harmoniously
	// then it returns false meaning it could not place it
	private static boolean placeQueenInRow(int[] chessBoard, int queenNum, int i) {
		boolean harmonious;
		int count = 0;
		
		do {
			int queenPlace = (int) (Math.random() * queenNum);
			chessBoard[i] = queenPlace;
			harmonious = isHarmonious(chessBoard, i, queenPlace);
			
			if(!harmonious)
				chessBoard[i] = -1;
			
			count++;
		} while(!harmonious && count <= 20);
		
		return harmonious;
	}
	
	// displays the chessboard
	private static void displayChessboard(int[] chessBoard) {
		for(int i = 0; i < chessBoard.length; i++) {
			System.out.print("i: " + i);
//			for(int j = 0; j < chessBoard[i].length; j++) {
//				if(j == 0) System.out.print("|");
//				if(chessBoard[i][j] == 1) {
//					System.out.print("Q|");
//				} else {
//					System.out.print(" |");
//				}
//				if(j == 7) System.out.println();
					
//			}
		}		
	}

	// method checks to see if queen can go where it is right now
	// goes through each row and makes sure that queen cannot be attacked by another queen
	private static boolean isHarmonious(int[] chessBoard, int rowIndex, int queenPlace) {
		for(int i = 0; i < chessBoard.length; i++) {
			int nonPlacement1, nonPlacement2;
			
			nonPlacement1 = queenPlace + Math.abs(rowIndex - i);
			nonPlacement2 = queenPlace - Math.abs(rowIndex - i);
			
			if(rowIndex != i) {
				if(queenPlace == chessBoard[i]) 
					return false;
				if(chessBoard[i] == nonPlacement1)
					return false;
				if(chessBoard[rowIndex - i] == nonPlacement2)
					return false;
			}
		}
		return true;
	}
}
